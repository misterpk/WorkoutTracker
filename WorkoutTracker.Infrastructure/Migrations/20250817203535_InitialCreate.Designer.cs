// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutTracker.Infrastructure.Data;

#nullable disable

namespace WorkoutTracker.Infrastructure.Migrations
{
    [DbContext(typeof(WorkoutTrackerDbContext))]
    [Migration("20250817203535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkoutTracker.Core.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMuscle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Exercises_Name");

                    b.HasIndex("PrimaryMuscle")
                        .HasDatabaseName("IX_Exercises_PrimaryMuscle");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Programs_Name");

                    b.ToTable("Programs", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.ProgramExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PlannedReps")
                        .HasColumnType("int");

                    b.Property<int>("PlannedRestTimeSeconds")
                        .HasColumnType("int");

                    b.Property<int>("PlannedSets")
                        .HasColumnType("int");

                    b.Property<decimal>("PlannedWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("IX_ProgramExercises_ExerciseId");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("IX_ProgramExercises_ProgramId");

                    b.HasIndex("ProgramId", "ExerciseId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProgramExercises_ProgramId_ExerciseId");

                    b.ToTable("ProgramExercises", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RPE")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("RestTimeSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("WorkoutExerciseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutExerciseId")
                        .HasDatabaseName("IX_Sets_WorkoutExerciseId");

                    b.HasIndex("WorkoutExerciseId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_Sets_WorkoutExerciseId_Order");

                    b.ToTable("Sets", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModifiedFromProgram")
                        .HasColumnType("bit");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Workouts_Date");

                    b.HasIndex("ProgramId");

                    b.ToTable("Workouts", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("IX_WorkoutExercises_ExerciseId");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("IX_WorkoutExercises_WorkoutId");

                    b.HasIndex("WorkoutId", "ExerciseId")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkoutExercises_WorkoutId_ExerciseId");

                    b.HasIndex("WorkoutId", "Order")
                        .HasDatabaseName("IX_WorkoutExercises_WorkoutId_Order");

                    b.ToTable("WorkoutExercises", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.ProgramExercise", b =>
                {
                    b.HasOne("WorkoutTracker.Core.Models.Exercise", "Exercise")
                        .WithMany("ProgramExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTracker.Core.Models.Program", "Program")
                        .WithMany("ProgramExercises")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Set", b =>
                {
                    b.HasOne("WorkoutTracker.Core.Models.WorkoutExercise", "WorkoutExercise")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Workout", b =>
                {
                    b.HasOne("WorkoutTracker.Core.Models.Program", "Program")
                        .WithMany("Workouts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Program");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.WorkoutExercise", b =>
                {
                    b.HasOne("WorkoutTracker.Core.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkoutTracker.Core.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Exercise", b =>
                {
                    b.Navigation("ProgramExercises");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Program", b =>
                {
                    b.Navigation("ProgramExercises");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("WorkoutTracker.Core.Models.WorkoutExercise", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
